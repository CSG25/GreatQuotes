{"version":3,"file":"static/js/857.8f67ab4c.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__+j3XM\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__+5PA4\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__2c3RV\",\"loading\":\"NewCommentForm_loading__VtE99\",\"control\":\"NewCommentForm_control__DOsTD\",\"actions\":\"NewCommentForm_actions__djEir\"};","import { useEffect, useRef } from \"react\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport classes from \"./NewCommentForm.module.css\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  \n\n  const { sendRequest, status,error } = useHttp(addComment);\n\n  const { onAddedComment } = props\n\n  useEffect(() => {\n    if(status === 'completed' && !error) {\n      onAddedComment()\n    }\n  }, [status])\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n\n    const enteredText = commentTextRef.current.value;\n\n    sendRequest({ text: enteredText}, props.quotesId );\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__w3aSf\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__uX+Se\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === 'completed' && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === 'completed' &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className='centered'>No comments were added yet!</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { Fragment, useEffect } from 'react';\nimport { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\n\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport Comments from '../components/comments/Comments';\nimport useHttp from '../hooks/use-http';\nimport { getSingleQuote } from '../lib/api';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\n\nconst QuoteDetail = () => {\n  const match = useRouteMatch();\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedQuote, error } = useHttp(\n    getSingleQuote,\n    true\n  );\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === 'pending') {\n    return (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className='centered'>{error}</p>;\n  }\n\n  if (!loadedQuote.text) {\n    return <p>No quote found!</p>;\n  }\n\n  return (\n    <Fragment>\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      <Route path={match.path} exact>\n        <div className='centered'>\n          <Link className='btn--flat' to={`${match.url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </Fragment>\n  );\n};\n\nexport default QuoteDetail;\n"],"names":["props","className","classes","text","author","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","quotesId","onSubmit","LoadingSpinner","htmlFor","id","rows","ref","comments","map","comment","useState","isAddingComment","setIsAddingComment","quoteId","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","match","useRouteMatch","getSingleQuote","loadedQuote","Fragment","path","exact","to","url"],"sourceRoot":""}